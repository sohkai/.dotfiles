########
# Base #
########

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'andymass/vim-matchup' # Must be loaded before vim-sensible

[[plugins]]
repo = 'tpope/vim-sensible'
on_if = '!has("nvim")' # NVIM already supplies these settings as defaults

######
# UI #
######

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  " Don't show mode in status line
  set noshowmode

  let g:lightline = {
  \  'colorscheme': 'jellybeans',
  \  'component_function': {
  \    'filename': 'LightlineFilename',
  \  }
  \}

  " Add components for ale
  let g:lightline.component_expand = {
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \}

  let g:lightline.component_type = {
  \  'linter_checking': 'middle',
  \  'linter_warnings': 'warning',
  \  'linter_errors': 'error',
  \  'linter_ok': 'middle',
  \ }

  " Use icons for ale
  let g:lightline#ale#indicator_checking = "\uf110"
  let g:lightline#ale#indicator_warnings = "\uf071"
  let g:lightline#ale#indicator_errors = "\uf05e"
  let g:lightline#ale#indicator_ok = "\uf00c"

  " Set up bar
  let g:lightline.active = {
  \  'left': [['mode', 'paste'], ['filename', 'readonly']],
  \  'right': [
  \    ['lineinfo'],
  \    ['percent'],
  \    ['filetype'],
  \    [
  \      'linter_checking',
  \      'linter_errors',
  \      'linter_warnings',
  \      'linter_ok'
  \    ]
  \  ]
  \}

  " Show relative path from git root if possible
  " And join modified indicator with name
  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    let modified = &modified ? ' +' : ''
    return expand('%') . modified
  endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = 'lightline'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let g:NERDTreeIgnore=['\.git$','\.hg$']
  let g:NERDTreeShowLineNumbers=1

  nnoremap <silent> <F2> :NERDTreeToggle<CR>
  nnoremap <Leader>tf :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
  nnoremap <F4> :UndotreeToggle<CR>
'''

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
	let g:signify_vcs_list = ['git']
'''

#############
# Utilities #
#############

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
	let g:ale_linters = {
  \  'css': ['stylelint'],
  \  'html': ['htmlhint'],
	\  'javascript': ['flow', 'prettier', 'standard', 'eslint'],
	\  'json': ['jsonlint'],
  \  'markdown': ['vale'],
  \  'python': ['flake8'],
  \  'solidity': ['solhint', 'solium']
	\}

	let g:ale_fixers = {
	\  'javascript': ['prettier', 'eslint'],
	\}

	" Only run linters named in ale_linters settings.
	let g:ale_linters_explicit = 1

	" Limit the window size to 5
	let g:ale_list_window_size = 5

	" Don't run ale until a save
	let g:ale_lint_on_text_changed = 'never'

	" Respect eslintignores
	let g:ale_javascript_eslint_suppress_eslintignore = 1

	" Mappings
  nmap <Leader>an <Plug>(ale_next_wrap)
  nmap <Leader>am <Plug>(ale_previous_wrap)
  nmap <Leader>af <Plug>(ale_fix)
  nmap <Leader>ad <Plug>(ale_go_to_definition_in_tab)
  nmap <Leader>ar <Plug>(ale_find_references)
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
  " Editorconfig excludes files over git and scp
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'junegunn/fzf'
on_if = "executable('fzf')"
hook_add = '''
  " Set actions
  let g:fzf_action = {
  \  'ctrl-t': 'tab split',
  \  'ctrl-i': 'split',
  \  'ctrl-s': 'vsplit'
  \}

	" Use own colorscheme
	let g:fzf_colors = {
	\ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment']
	\}

  " Remove status line in fzf buffer
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

	" Customize Rg command
	command! -bang -nargs=* Rg
	\  call fzf#vim#grep(
  \    'rg --column --line-number --no-heading --color=always --smart-case -g "!*.svg" -- '.shellescape(<q-args>), 1,
	\    <bang>0 ? fzf#vim#with_preview({'options': '--no-sort --delimiter : --nth 4..'}, 'up:60%')
	\            : fzf#vim#with_preview({'options': '--no-sort --delimiter : --nth 4..'}, 'right:50%', '?'),
	\    <bang>0
	\  )

  let g:fzf_layout = { 'down': '~40%' }
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
	" Jump to the existing window if possible
	let g:fzf_buffers_jump = 1

	" Don't open files in non-functional buffers (eg. NERDTree)
  " See https://github.com/junegunn/fzf/issues/453
  function! FZFOpen(cmd)
    " Define the functional buffer types that we want to not clobber
    let functional_buf_types = ['quickfix', 'help', 'nofile', 'terminal']

    " If more than 1 window, and buffer type is not one of the functional types
    if winnr('$') > 1 && (index(functional_buf_types, &bt) >= 0)
        " Find all 'normal' (not functional) buffer windows
        let norm_wins = filter(range(1, winnr('$')),
                    \ 'index(functional_buf_types, getbufvar(winbufnr(v:val), "&bt")) == -1')

        " Grab the first one that we can use
        let norm_win = !empty(norm_wins) ? norm_wins[0] : 0

        " Move to that window
        exe norm_win . 'winc w'
    endif

    " Execute the passed command
    exe a:cmd
  endfunction

	" Mappings
 	nmap <silent> <leader>ff :call FZFOpen(':Files')<CR>
 	nmap <silent> <leader>fa :call FZFOpen(':Rg')<CR>
 	nmap <silent> <leader>fb :call FZFOpen(':Buffers')<CR>
 	nmap <silent> <leader>fl :call FZFOpen(':Lines')<CR>
'''

[[plugins]]
repo = 'Valloric/ListToggle'
hook_add = '''
  let g:lt_location_list_toggle_map = '<F3>'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  nmap <leader>go <Plug>(openbrowser-open)
  vmap <leader>go <Plug>(openbrowser-open)
'''

[[plugins]]
repo = 'wellle/targets.vim'

[[plugins]]
repo = 'ap/vim-css-color'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'mmalecki/vim-node.js'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
	let g:javascript_plugin_jsdoc = 1
	let g:javascript_plugin_flow = 1

	" Don't conceal json syntax
	let g:vim_json_syntax_conceal = 0

  " Disable custom graphql and markdown plugin
  let g:polyglot_disabled = ['graphql', 'markdown']
'''

[[plugins]]
repo = 'rajasegar/vim-astro'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

#########
# Candy #
#########

[[plugins]]
repo = 'jordwalke/flatlandia'

[[plugins]]
repo = 'keith/parsec.vim'

[[plugins]]
repo = 'junegunn/seoul256.vim'
hook_add = '''
  let g:seoul256_background = 235
  let g:seoul256_light_background = 255
'''

[[plugins]]
repo = 'rakr/vim-one'
